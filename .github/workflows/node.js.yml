name: Node Applications
##on: [push]

#on:[push, pull_request, issues]
on: 
   push:
    branches:
     - '**'
   pull_request:
    branches:
     - 'main'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
    steps:
    - uses: actions/checkout@v2
    
    - name: Send Slack Message
      uses: archive/github-actions-slack@v2.0.0
      id: send-message
      with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: C030GS75NP2
          slack-text: Time to react...

    - name: Send Slack Message Result
      run: echo "Data - ${{ steps.send-message.outputs.slack-result }}"

    - name: Some step in between
      run: echo "..."

    - name: Send Slack Reaction To Message
      uses: archive/github-actions-slack@v2.0.0
      with:
        slack-function: send-reaction
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
        slack-channel: ${{ fromJson(steps.send-message.outputs.slack-result).response.channel }}
        slack-emoji-name: thumbsup
        slack-message-timestamp: ${{ fromJson(steps.send-message.outputs.slack-result).response.message.ts }}

    - name: Send Slack Reaction To Message Result
      run: echo "Data - ${{ steps.send-message.outputs.slack-result }}"

    
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Kubernets set context
      uses: azure/k8s-set-context@v2
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
    - name: Find and Replace
      uses: jacobtomlinson/gha-find-replace@v2
      with:
        find: "IMAGE_LABEL"
        replace: "${{ github.sha }}"
        include: "kube/deployment.yaml"
    - name: Deploy to Cluster
      run: |
        ls
        cd kube
        kubectl apply -f deployment.yaml

  notify:

    name: Notify on Slack
    runs-on: ubuntu-latest
    # Only run this workflow when "build" workflow succeeds
    needs: [build-linux]

    # Only run this workflow if it target is main branch on pull_request event
    if: ${{ github.base_ref == 'main' && github.event_name == 'pull_request' }}

    steps:

      - uses: abinoda/slack-action@master
        env:
          # required
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          # custom message to send to slack
          args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}' 
        
        # Pick up events even if the job is success.
        if: success()
